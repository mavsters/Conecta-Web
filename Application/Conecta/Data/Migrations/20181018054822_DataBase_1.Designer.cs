// <auto-generated />
using System;
using Conecta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conecta.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181018054822_DataBase_1")]
    partial class DataBase_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conecta.Models.Coins.Benefits", b =>
                {
                    b.Property<int>("BenefitsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BenefitTypeId");

                    b.Property<double>("Count");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateEnd");

                    b.Property<int>("PointsMainId");

                    b.HasKey("BenefitsId");

                    b.HasIndex("BenefitTypeId");

                    b.HasIndex("PointsMainId")
                        .IsUnique();

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("Conecta.Models.Coins.QRMain", b =>
                {
                    b.Property<int>("QRMainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("EventId");

                    b.Property<int>("PlaceId");

                    b.Property<int>("UserId");

                    b.Property<bool>("active");

                    b.Property<bool>("scan");

                    b.HasKey("QRMainId");

                    b.HasIndex("EventId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("QRMain");
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Commune", b =>
                {
                    b.Property<int>("CommuneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProvinceId");

                    b.HasKey("CommuneId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Commune");
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryFlagUrl");

                    b.Property<string>("IATA");

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NeighborhoodId");

                    b.Property<string>("Type");

                    b.HasKey("MapId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Neighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommuneId");

                    b.Property<string>("Name");

                    b.HasKey("NeighborhoodId");

                    b.HasIndex("CommuneId");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Conecta.Models.Events.Event", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("EventTypeID");

                    b.Property<string>("Title");

                    b.HasKey("UserId");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Conecta.Models.Events.Place_Event", b =>
                {
                    b.Property<int>("Place_EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("PlaceId");

                    b.HasKey("Place_EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Place_Event");
                });

            modelBuilder.Entity("Conecta.Models.Events.UserMain_Event", b =>
                {
                    b.Property<int>("UserMain_EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attend");

                    b.Property<int>("EventId");

                    b.Property<int>("UserMainId");

                    b.HasKey("UserMain_EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserMainId");

                    b.ToTable("UserMain_Event");
                });

            modelBuilder.Entity("Conecta.Models.Location.LocationMain", b =>
                {
                    b.Property<int>("LocationMainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Lat");

                    b.Property<int>("Lon");

                    b.Property<int>("PlaceId");

                    b.Property<int>("UserMainId");

                    b.HasKey("LocationMainId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.HasIndex("UserMainId");

                    b.ToTable("LocationMain");
                });

            modelBuilder.Entity("Conecta.Models.Location.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<int>("MapId");

                    b.Property<string>("Name");

                    b.Property<int?>("PlaceTypeID");

                    b.HasKey("PlaceId");

                    b.HasIndex("MapId")
                        .IsUnique();

                    b.HasIndex("PlaceTypeID");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Conecta.Models.Points.PointsMain", b =>
                {
                    b.Property<int>("PointsMainId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("QRMainId");

                    b.Property<int?>("UserMainUserId");

                    b.Property<int>("UserMain_EventId");

                    b.Property<double>("count");

                    b.HasKey("PointsMainId");

                    b.HasIndex("QRMainId")
                        .IsUnique();

                    b.HasIndex("UserMainUserId");

                    b.HasIndex("UserMain_EventId");

                    b.ToTable("PointsMain");
                });

            modelBuilder.Entity("Conecta.Models.Routes.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Lat");

                    b.Property<int?>("LocationMainId");

                    b.Property<int>("Lon");

                    b.Property<int>("UserId");

                    b.HasKey("RouteID");

                    b.HasIndex("LocationMainId");

                    b.HasIndex("UserId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Conecta.Models.Type.BenefitType", b =>
                {
                    b.Property<int>("BenefitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("BenefitTypeId");

                    b.ToTable("BenefitType");
                });

            modelBuilder.Entity("Conecta.Models.Type.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryTypeID");

                    b.ToTable("CategoryType");
                });

            modelBuilder.Entity("Conecta.Models.Type.EventType", b =>
                {
                    b.Property<int>("EventTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("Conecta.Models.Type.PlaceType", b =>
                {
                    b.Property<int>("PlaceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryTypeID");

                    b.Property<string>("Name");

                    b.HasKey("PlaceTypeID");

                    b.HasIndex("CategoryTypeID");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("Conecta.Models.User.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("PersonId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Conecta.Models.User.UserMain", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("UserId");

                    b.ToTable("UserMain");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Conecta.Models.Coins.Benefits", b =>
                {
                    b.HasOne("Conecta.Models.Type.BenefitType", "BenefitType")
                        .WithMany()
                        .HasForeignKey("BenefitTypeId");

                    b.HasOne("Conecta.Models.Points.PointsMain", "PointsMain")
                        .WithOne("Benefits")
                        .HasForeignKey("Conecta.Models.Coins.Benefits", "PointsMainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Coins.QRMain", b =>
                {
                    b.HasOne("Conecta.Models.Events.Event", "Event")
                        .WithMany("QRMain")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.Location.Place", "Place")
                        .WithOne("QRMain")
                        .HasForeignKey("Conecta.Models.Coins.QRMain", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.User.UserMain", "UserMain")
                        .WithMany("QRMain")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Commune", b =>
                {
                    b.HasOne("Conecta.Models.CountryStructure.Province", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Map", b =>
                {
                    b.HasOne("Conecta.Models.CountryStructure.Neighborhood", "Neighborhood")
                        .WithMany("Maps")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Neighborhood", b =>
                {
                    b.HasOne("Conecta.Models.CountryStructure.Commune", "Commune")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.CountryStructure.Province", b =>
                {
                    b.HasOne("Conecta.Models.CountryStructure.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Events.Event", b =>
                {
                    b.HasOne("Conecta.Models.Type.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeID");
                });

            modelBuilder.Entity("Conecta.Models.Events.Place_Event", b =>
                {
                    b.HasOne("Conecta.Models.Events.Event", "Event")
                        .WithMany("Place_Event")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.Location.Place", "Place")
                        .WithMany("Place_Event")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Events.UserMain_Event", b =>
                {
                    b.HasOne("Conecta.Models.Events.Event", "Event")
                        .WithMany("UserMain_Event")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.User.UserMain", "UserMain")
                        .WithMany("UserMain_Event")
                        .HasForeignKey("UserMainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Location.LocationMain", b =>
                {
                    b.HasOne("Conecta.Models.Location.Place", "Place")
                        .WithOne("LocationMain")
                        .HasForeignKey("Conecta.Models.Location.LocationMain", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.User.UserMain", "UserMain")
                        .WithMany()
                        .HasForeignKey("UserMainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Location.Place", b =>
                {
                    b.HasOne("Conecta.Models.CountryStructure.Map", "Map")
                        .WithOne("place")
                        .HasForeignKey("Conecta.Models.Location.Place", "MapId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.Type.PlaceType", "PlaceType")
                        .WithMany()
                        .HasForeignKey("PlaceTypeID");
                });

            modelBuilder.Entity("Conecta.Models.Points.PointsMain", b =>
                {
                    b.HasOne("Conecta.Models.Coins.QRMain", "QRMain")
                        .WithOne("PointsMain")
                        .HasForeignKey("Conecta.Models.Points.PointsMain", "QRMainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Conecta.Models.User.UserMain")
                        .WithMany("PointsMain")
                        .HasForeignKey("UserMainUserId");

                    b.HasOne("Conecta.Models.Events.UserMain_Event", "UserMain_Event")
                        .WithMany("PointsMain")
                        .HasForeignKey("UserMain_EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Routes.Route", b =>
                {
                    b.HasOne("Conecta.Models.Location.LocationMain", "location")
                        .WithMany()
                        .HasForeignKey("LocationMainId");

                    b.HasOne("Conecta.Models.User.UserMain", "UserMain")
                        .WithMany("Route")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Conecta.Models.Type.PlaceType", b =>
                {
                    b.HasOne("Conecta.Models.Type.CategoryType", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryTypeID");
                });

            modelBuilder.Entity("Conecta.Models.User.Person", b =>
                {
                    b.HasOne("Conecta.Models.User.UserMain", "UserMain")
                        .WithOne("Person")
                        .HasForeignKey("Conecta.Models.User.Person", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
